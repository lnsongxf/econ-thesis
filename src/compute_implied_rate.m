function [ R_t_return ] = compute_implied_rate( A0, A1, Sigma, Y_t, options )

% settings
real = options.real;
nu = options.nu;
phi = options.phi;
beta = 0.9926; % discount rate
alpha = 2; % coefficient of relative risk aversion

% get data series
c_t = Y_t(1, :); % log consumption
l_t = Y_t(3, :); % leisure
c_tm1 = Y_t(8, :);

% compute conditional moments
[ Et_c_tp1, Et_c_tp2, Et_pi_tp1, Et_l_tp1, Et_l_tp2, Vt_c_tp1, ...
    Vt_c_tp2, Vt_pi_tp1, Vt_l_tp1, Ct_c_pi_tp1, Ct_c_l_tp1, ...
    Ct_pi_l_tp1, Ct_c_l_tp2, Ct_c_tp1_tp2, Ct_c_tp1_l_tp2, ...
    Ct_pi_tp1_c_tp2, Ct_pi_tp1_l_tp2 ] = ...
    compute_moments(A0, A1, Sigma, Y_t);

% compute rates
if real == 0
    chi_1t = (nu*(1-alpha) - 1)*Et_c_tp1 - phi*nu*(1-alpha)*c_t ...
        + (1-nu)*(1-alpha)*Et_l_tp1 - Et_pi_tp1 ...
        + 1/2*(nu*(1-alpha) - 1)^2*Vt_c_tp1 ...
        + 1/2*((1-nu)*(1-alpha))^2*Vt_l_tp1 + 1/2*Vt_pi_tp1 ...
        - (1-nu)*(1-alpha)*Ct_pi_l_tp1 ...
        + (nu*(1-alpha) - 1)*(1-nu)*(1-alpha)*Ct_c_l_tp1 ...
        - (nu*(1-alpha) - 1)*Ct_c_pi_tp1;

    chi_2t = nu*(1-alpha)*Et_c_tp2 - (phi*nu*(1-alpha) + 1)*Et_c_tp1 ...
        + (1-nu)*(1-alpha)*Et_l_tp2 - Et_pi_tp1 ...
        + 1/2*(nu*(1-alpha))^2*Vt_c_tp2 ...
        + 1/2*(phi*nu*(1-alpha) + 1)^2*Vt_c_tp1 ...
        + 1/2*((1-nu)*(1-alpha))^2*Vt_l_tp1 + 1/2*Vt_pi_tp1 ...
        - nu*(1-alpha)*Ct_pi_tp1_c_tp2 ...
        + (phi*nu*(1-alpha) + 1)*Ct_c_pi_tp1 ...
        - (1-nu)*(1-alpha)*Ct_pi_tp1_l_tp2 ...
        - nu*(1-alpha)*(phi*nu*(1-alpha) + 1)*Ct_c_tp1_tp2 ...
        + nu*(1-nu)*(1-alpha)^2*Ct_c_l_tp2 ...
        - (phi*nu*(1-alpha) + 1)*(1-nu)*(1-alpha)*Ct_c_tp1_l_tp2;

    chi_3t = (nu*(1-alpha) - 1)*c_t - phi*nu*(1-alpha)*c_tm1 ...
        + (1-nu)*(1-alpha)*l_t;

    chi_4t = nu*(1-alpha)*Et_c_tp1 - (phi*nu*(1-alpha) + 1)*c_t ...
        + (1-nu)*(1-alpha)*Et_l_tp1 + 1/2*(nu*(1-alpha))^2*Vt_c_tp1 ...
        + 1/2*((1-nu)*(1-alpha))^2*Vt_l_tp1 ...
        + nu*(1-nu)*(1-alpha)^2*Ct_c_l_tp1;
else
    chi_1t = (nu*(1-alpha) - 1)*Et_c_tp1 - phi*nu*(1-alpha)*c_t ...
        + (1-nu)*(1-alpha)*Et_l_tp1 + 1/2*(nu*(1-alpha) - 1)^2*Vt_c_tp1 ...
        + 1/2*((1-nu)*(1-alpha))^2*Vt_l_tp1 ...
        + (nu*(1-alpha) - 1)*(1-nu)*(1-alpha)*Ct_c_l_tp1;
    
    chi_2t = nu*(1-alpha)*Et_c_tp2 - (phi*nu*(1-alpha) + 1)*Et_c_tp1 ...
        + (1-nu)*(1-alpha)*Et_l_tp2 + 1/2*(nu*(1-alpha))^2*Vt_c_tp2 ...
        + 1/2*(phi*nu*(1-alpha) + 1)^2*Vt_c_tp1 ...
        + 1/2*((1-nu)*(1-alpha))^2*Vt_l_tp1 ...
        - nu*(1-alpha)*(phi*nu*(1-alpha) + 1)*Ct_c_tp1_tp2 ...
        + nu*(1-nu)*(1-alpha)^2*Ct_c_l_tp2 ...
        - (phi*nu*(1-alpha) + 1)*(1-nu)*(1-alpha)*Ct_c_tp1_l_tp2;
    
    chi_3t = (nu*(1-alpha) - 1)*c_t - phi*nu*(1-alpha)*c_tm1 ...
        + (1-nu)*(1-alpha)*l_t;
    
    chi_4t = nu*(1-alpha)*Et_c_tp1 - (phi*nu*(1-alpha) + 1)*c_t ...
        + (1-nu)*(1-alpha)*Et_l_tp1 + 1/2*(nu*(1-alpha))^2*Vt_c_tp1 ...
        + 1/2*((1-nu)*(1-alpha))^2*Vt_l_tp1 ...
        + nu*(1-nu)*(1-alpha)^2*Ct_c_l_tp1;
end

R_t_inv = beta * (exp(chi_1t) - beta*phi*exp(chi_2t)) ./ (exp(chi_3t) - beta*phi*exp(chi_4t));
R_t = 1 ./ R_t_inv; % quarterly gross rate
R_t_ann = R_t .^ 4; % annualized gross rate
R_t_scaled = log(R_t_ann) .* 100;

if options.irf == 1
    R_t_return = -log(R_t_inv);
else
    R_t_return = R_t_scaled;
end

end

